; ./software/main.asm
; 1: ; Memory usage:
; 2: ; Kernel is finished, so we can reuse all memory. We can use the following pages
; 3: ; 0x00: page zero
; 4: ;     0x03-0x04: monitor cursor
; 5: ;     0xF0-0xFF: temporary var area
; 6: ; 0x01: hardware stack
; 7: ; 0x02-0x9F: program ram
; 8: ; 0xC0: data
; 9: ; 0xCF: software stack
; 10: 
; 11: ; Calling Convention
; 12: ; Using a 'software stack' using the X register as the stack pointer
; 13: ; The stack will be at address 0xCF00 to 0xCFFF and is bottom-up
; 14: ; Before we call a function, we push the parameters, (i.e. p1 and p2)
; 15: ; PHX ; Preserve the value of X (current frame)
; 16: ; LDA <p1>
; 17: ; STA $CF00,X
; 18: ; LDA <p2>
; 19: ; STA $CF01,X
; 20: ; JSR <sub>
; 21: ; PLX ; (Restore current frame - this means we do not have to 'pop' all pushed)
; 22: 
; 23: ; The called function
; 24: ; Reserve space for the local variables (5 bytes)
; 25: ; Access parameter p1
; 26: ; LDA $CF00,X
; 27: ; Access first local var
; 28: ; LDA $CF02,X
; 29: ; Call a function
; 30: ; PHX
; 31: ; LDA <p1>
; 32: ; STA $CF07,X
; 33: ; STX $07
; 34: ; JSR <sub>
; 35: ; PLX
; 36: 
; 37: ; Main program
; 38: %base = #$0200
; 39: %stackbase = #$CF00
; 40: 
; 41: START %base ; This is where the program should start
; 42: 
; 43: BASE %base
; 44: ; Initialize the system - we dump the whole kernel stack
; 45: LDX $FF
; Change address to 0x0200
O _  _ _ _ _  _ _ _ _ ;  ; 0x00
O O  _ _ _ _  _ _ O _ ;  ; 0x02
_ O  O _ O _  _ _ O _ ;  ; 0x0200 ; 0xA2
_ O  O O O O  O O O O ;  ; 0x0201 ; 0xFF
; 46: TXS
_ O  O _ _ O  O _ O _ ;  ; 0x0202 ; 0x9A
; 47: ; Reset the software stack
; 48: LDX $00
_ O  O _ O _  _ _ O _ ;  ; 0x0203 ; 0xA2
_ O  _ _ _ _  _ _ _ _ ;  ; 0x0204 ; 0x00
; 49: ; Clear the screen: monitor_clear():void
; 50: PHX 
_ O  O O _ O  O _ O _ ;  ; 0x0205 ; 0xDA
; 51: JSR @monitor_clear
_ O  _ _ O _  _ _ _ _ ;  ; 0x0206 ; 0x20
_ O  _ _ O O  _ _ _ _ ;  ; 0x0207 ; 0x30
_ O  _ _ _ _  _ _ O _ ;  ; 0x0208 ; 0x02
; 52: PLX
_ O  O O O O  O _ O _ ;  ; 0x0209 ; 0xFA
; 53: ; Goto 2, 1: monitor_goto(x:byte,y:byte):void
; 54: PHX
_ O  O O _ O  O _ O _ ;  ; 0x020A ; 0xDA
; 55: LDA $02
_ O  O _ O _  O _ _ O ;  ; 0x020B ; 0xA9
_ O  _ _ _ _  _ _ O _ ;  ; 0x020C ; 0x02
; 56: STA (%stackbase)+X
_ O  O _ _ O  O O _ O ;  ; 0x020D ; 0x9D
_ O  _ _ _ _  _ _ _ _ ;  ; 0x020E ; 0x00
_ O  O O _ _  O O O O ;  ; 0x020F ; 0xCF
; 57: LDA $01
_ O  O _ O _  O _ _ O ;  ; 0x0210 ; 0xA9
_ O  _ _ _ _  _ _ _ O ;  ; 0x0211 ; 0x01
; 58: STA (%stackbase+$01)+X
_ O  O _ _ O  O O _ O ;  ; 0x0212 ; 0x9D
_ O  _ _ _ _  _ _ _ O ;  ; 0x0213 ; 0x01
_ O  O O _ _  O O O O ;  ; 0x0214 ; 0xCF
; 59: JSR @monitor_goto
_ O  _ _ O _  _ _ _ _ ;  ; 0x0215 ; 0x20
_ O  _ O _ O  _ O O _ ;  ; 0x0216 ; 0x56
_ O  _ _ _ _  _ _ O _ ;  ; 0x0217 ; 0x02
; 60: PLX
_ O  O O O O  O _ O _ ;  ; 0x0218 ; 0xFA
; 61: ; Print "Hello Xerxes": monitor_print(addr:word,len:byte):void
; 62: PHX
_ O  O O _ O  O _ O _ ;  ; 0x0219 ; 0xDA
; 63: LDA lo(@data_hello)
_ O  O _ O _  O _ _ O ;  ; 0x021A ; 0xA9
_ O  _ _ _ _  _ _ _ _ ;  ; 0x021B ; 0x00
; 64: STA (%stackbase)+X
_ O  O _ _ O  O O _ O ;  ; 0x021C ; 0x9D
_ O  _ _ _ _  _ _ _ _ ;  ; 0x021D ; 0x00
_ O  O O _ _  O O O O ;  ; 0x021E ; 0xCF
; 65: LDA hi(@data_hello)
_ O  O _ O _  O _ _ O ;  ; 0x021F ; 0xA9
_ O  O O _ _  _ _ _ _ ;  ; 0x0220 ; 0xC0
; 66: STA (%stackbase+$01)+X
_ O  O _ _ O  O O _ O ;  ; 0x0221 ; 0x9D
_ O  _ _ _ _  _ _ _ O ;  ; 0x0222 ; 0x01
_ O  O O _ _  O O O O ;  ; 0x0223 ; 0xCF
; 67: LDA $0C ; length = 12 bytes
_ O  O _ O _  O _ _ O ;  ; 0x0224 ; 0xA9
_ O  _ _ _ _  O O _ _ ;  ; 0x0225 ; 0x0C
; 68: STA (%stackbase+$02)+X
_ O  O _ _ O  O O _ O ;  ; 0x0226 ; 0x9D
_ O  _ _ _ _  _ _ O _ ;  ; 0x0227 ; 0x02
_ O  O O _ _  O O O O ;  ; 0x0228 ; 0xCF
; 69: JSR @monitor_print
_ O  _ _ O _  _ _ _ _ ;  ; 0x0229 ; 0x20
_ O  _ O O O  O O O _ ;  ; 0x022A ; 0x7E
_ O  _ _ _ _  _ _ O _ ;  ; 0x022B ; 0x02
; 70: PLX
_ O  O O O O  O _ O _ ;  ; 0x022C ; 0xFA
; 71: ; Loop forever
; 72: @label5: JMP @label5
_ O  _ O _ _  O O _ _ ;  ; 0x022D ; 0x4C
_ O  _ _ O _  O O _ O ;  ; 0x022E ; 0x2D
_ O  _ _ _ _  _ _ O _ ;  ; 0x022F ; 0x02
; ./software/monitor-driver.asm
; 1: %stackbase = #$CF00
; 2: 
; 3: %clear = $20
; 4: %screenAddress1 = #$0400
; 5: %screenAddress2 = #$04FA
; 6: %screenAddress3 = #$05F4
; 7: %screenAddress4 = #$06EE
; 8: 
; 9: %cursorAddress = #$03
; 10: 
; 11: @monitor_clear: ; void monitor_clear()
; 12:     ; Clear the screen
; 13:     ; 0-249
; 14:     LDY $FA
_ O  O _ O _  _ _ _ _ ;  ; 0x0230 ; 0xA0
_ O  O O O O  O _ O _ ;  ; 0x0231 ; 0xFA
; 15:     LDA %clear
_ O  O _ O _  O _ _ O ;  ; 0x0232 ; 0xA9
_ O  _ _ O _  _ _ _ _ ;  ; 0x0233 ; 0x20
; 16:     STA %screenAddress1
_ O  O _ _ _  O O _ O ;  ; 0x0234 ; 0x8D
_ O  _ _ _ _  _ _ _ _ ;  ; 0x0235 ; 0x00
_ O  _ _ _ _  _ O _ _ ;  ; 0x0236 ; 0x04
; 17:     @monitor_clear_label1: STA %screenAddress1+Y
_ O  O _ _ O  O _ _ O ;  ; 0x0237 ; 0x99
_ O  _ _ _ _  _ _ _ _ ;  ; 0x0238 ; 0x00
_ O  _ _ _ _  _ O _ _ ;  ; 0x0239 ; 0x04
; 18:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x023A ; 0x88
; 19:     BNE @monitor_clear_label1
_ O  O O _ O  _ _ _ _ ;  ; 0x023B ; 0xD0
_ O  O O O O  O _ O _ ;  ; 0x023C ; 0xFA
; 20:     ; 250-499
; 21:     LDX $FA
_ O  O _ O _  _ _ O _ ;  ; 0x023D ; 0xA2
_ O  O O O O  O _ O _ ;  ; 0x023E ; 0xFA
; 22:     @monitor_clear_label2: STA %screenAddress2+Y
_ O  O _ _ O  O _ _ O ;  ; 0x023F ; 0x99
_ O  O O O O  O _ O _ ;  ; 0x0240 ; 0xFA
_ O  _ _ _ _  _ O _ _ ;  ; 0x0241 ; 0x04
; 23:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x0242 ; 0x88
; 24:     BNE @monitor_clear_label2
_ O  O O _ O  _ _ _ _ ;  ; 0x0243 ; 0xD0
_ O  O O O O  O _ O _ ;  ; 0x0244 ; 0xFA
; 25:     ; 500-749
; 26:     LDX $FA
_ O  O _ O _  _ _ O _ ;  ; 0x0245 ; 0xA2
_ O  O O O O  O _ O _ ;  ; 0x0246 ; 0xFA
; 27:     @monitor_clear_label3: STA %screenAddress3+Y
_ O  O _ _ O  O _ _ O ;  ; 0x0247 ; 0x99
_ O  O O O O  _ O _ _ ;  ; 0x0248 ; 0xF4
_ O  _ _ _ _  _ O _ O ;  ; 0x0249 ; 0x05
; 28:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x024A ; 0x88
; 29:     BNE @monitor_clear_label3
_ O  O O _ O  _ _ _ _ ;  ; 0x024B ; 0xD0
_ O  O O O O  O _ O _ ;  ; 0x024C ; 0xFA
; 30:     ; 750-999
; 31:     LDX $F9
_ O  O _ O _  _ _ O _ ;  ; 0x024D ; 0xA2
_ O  O O O O  O _ _ O ;  ; 0x024E ; 0xF9
; 32:     @monitor_clear_label4: STA %screenAddress4+Y
_ O  O _ _ O  O _ _ O ;  ; 0x024F ; 0x99
_ O  O O O _  O O O _ ;  ; 0x0250 ; 0xEE
_ O  _ _ _ _  _ O O _ ;  ; 0x0251 ; 0x06
; 33:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x0252 ; 0x88
; 34:     BNE @monitor_clear_label4
_ O  O O _ O  _ _ _ _ ;  ; 0x0253 ; 0xD0
_ O  O O O O  O _ O _ ;  ; 0x0254 ; 0xFA
; 35:     RTS
_ O  _ O O _  _ _ _ _ ;  ; 0x0255 ; 0x60
; 36: 
; 37: @monitor_goto: ; void monitor_goto(byte x, byte y)
; 38:     ; Set the cursor location to the start
; 39:     LDA $00
_ O  O _ O _  O _ _ O ;  ; 0x0256 ; 0xA9
_ O  _ _ _ _  _ _ _ _ ;  ; 0x0257 ; 0x00
; 40:     STA %cursorAddress
_ O  O _ _ _  _ O _ O ;  ; 0x0258 ; 0x85
_ O  _ _ _ _  _ _ O O ;  ; 0x0259 ; 0x03
; 41:     LDA $04
_ O  O _ O _  O _ _ O ;  ; 0x025A ; 0xA9
_ O  _ _ _ _  _ O _ _ ;  ; 0x025B ; 0x04
; 42:     STA %cursorAddress + $01
_ O  O _ _ _  _ O _ O ;  ; 0x025C ; 0x85
_ O  _ _ _ _  _ O _ _ ;  ; 0x025D ; 0x04
; 43: 
; 44:     ; For each y, increment the location by 40
; 45:     LDY (%stackbase+$01)+X ; Y = y
_ O  O _ O O  O O _ _ ;  ; 0x025E ; 0xBC
_ O  _ _ _ _  _ _ _ O ;  ; 0x025F ; 0x01
_ O  O O _ _  O O O O ;  ; 0x0260 ; 0xCF
; 46:     BEQ @monitor_goto_x ; if Y = 0, goto x
_ O  O O O O  _ _ _ _ ;  ; 0x0261 ; 0xF0
_ O  _ _ _ _  O O O _ ;  ; 0x0262 ; 0x0E
; 47:     @monitor_goto_y_1:
; 48:     LDA %cursorAddress
_ O  O _ O _  _ O _ O ;  ; 0x0263 ; 0xA5
_ O  _ _ _ _  _ _ O O ;  ; 0x0264 ; 0x03
; 49:     CLC
_ O  _ _ _ O  O _ _ _ ;  ; 0x0265 ; 0x18
; 50:     ADC $28 ; $28 = 40 (columns)
_ O  _ O O _  O _ _ O ;  ; 0x0266 ; 0x69
_ O  _ _ O _  O _ _ _ ;  ; 0x0267 ; 0x28
; 51:     STA %cursorAddress
_ O  O _ _ _  _ O _ O ;  ; 0x0268 ; 0x85
_ O  _ _ _ _  _ _ O O ;  ; 0x0269 ; 0x03
; 52:     BCC @monitor_goto_y_2 ; No carry - do not increment hi
_ O  O _ _ O  _ _ _ _ ;  ; 0x026A ; 0x90
_ O  _ _ _ _  _ _ O _ ;  ; 0x026B ; 0x02
; 53:     INC %cursorAddress+$01
_ O  O O O _  _ O O _ ;  ; 0x026C ; 0xE6
_ O  _ _ _ _  _ O _ _ ;  ; 0x026D ; 0x04
; 54:     @monitor_goto_y_2: 
; 55:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x026E ; 0x88
; 56:     BNE @monitor_goto_y_1 ; Y != 0, inc again
_ O  O O _ O  _ _ _ _ ;  ; 0x026F ; 0xD0
_ O  O O O O  _ _ O _ ;  ; 0x0270 ; 0xF2
; 57: 
; 58:     ; Now add x to the address
; 59:     @monitor_goto_x:
; 60:     LDA (%stackbase)+X ; A = x
_ O  O _ O O  O O _ O ;  ; 0x0271 ; 0xBD
_ O  _ _ _ _  _ _ _ _ ;  ; 0x0272 ; 0x00
_ O  O O _ _  O O O O ;  ; 0x0273 ; 0xCF
; 61:     CLC
_ O  _ _ _ O  O _ _ _ ;  ; 0x0274 ; 0x18
; 62:     ADC %cursorAddress ; A = x + %cursorAddress
_ O  _ O O _  _ O _ O ;  ; 0x0275 ; 0x65
_ O  _ _ _ _  _ _ O O ;  ; 0x0276 ; 0x03
; 63:     STA %cursorAddress
_ O  O _ _ _  _ O _ O ;  ; 0x0277 ; 0x85
_ O  _ _ _ _  _ _ O O ;  ; 0x0278 ; 0x03
; 64:     BCC @monitor_goto_x_2 ; No carry - do not increment hi
_ O  O _ _ O  _ _ _ _ ;  ; 0x0279 ; 0x90
_ O  _ _ _ _  _ _ O _ ;  ; 0x027A ; 0x02
; 65:     INC %cursorAddress+$01
_ O  O O O _  _ O O _ ;  ; 0x027B ; 0xE6
_ O  _ _ _ _  _ O _ _ ;  ; 0x027C ; 0x04
; 66:     @monitor_goto_x_2:
; 67:     RTS
_ O  _ O O _  _ _ _ _ ;  ; 0x027D ; 0x60
; 68: 
; 69: @monitor_print: ; void monitor_print(addr, len)
; 70:     ; Write the target address to the temporary page zero var area
; 71:     LDA (%stackbase)+X
_ O  O _ O O  O O _ O ;  ; 0x027E ; 0xBD
_ O  _ _ _ _  _ _ _ _ ;  ; 0x027F ; 0x00
_ O  O O _ _  O O O O ;  ; 0x0280 ; 0xCF
; 72:     STA #$F0
_ O  O _ _ _  _ O _ O ;  ; 0x0281 ; 0x85
_ O  O O O O  _ _ _ _ ;  ; 0x0282 ; 0xF0
; 73:     LDA (%stackbase+$01)+X
_ O  O _ O O  O O _ O ;  ; 0x0283 ; 0xBD
_ O  _ _ _ _  _ _ _ O ;  ; 0x0284 ; 0x01
_ O  O O _ _  O O O O ;  ; 0x0285 ; 0xCF
; 74:     STA #$F1
_ O  O _ _ _  _ O _ O ;  ; 0x0286 ; 0x85
_ O  O O O O  _ _ _ O ;  ; 0x0287 ; 0xF1
; 75:     ; Copy the data at addr to the current cursor
; 76:     LDY (%stackbase+$02)+X ; Y = len
_ O  O _ O O  O O _ _ ;  ; 0x0288 ; 0xBC
_ O  _ _ _ _  _ _ O _ ;  ; 0x0289 ; 0x02
_ O  O O _ _  O O O O ;  ; 0x028A ; 0xCF
; 77:     BEQ @monitor_print_done ; if Y = 0, goto end
_ O  O O O O  _ _ _ _ ;  ; 0x028B ; 0xF0
_ O  _ _ _ _  O _ _ O ;  ; 0x028C ; 0x09
; 78:     @monitor_print_again:
; 79:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x028D ; 0x88
; 80:     LDA [#$F0] + Y
_ O  O _ O O  _ _ _ O ;  ; 0x028E ; 0xB1
_ O  O O O O  _ _ _ _ ;  ; 0x028F ; 0xF0
; 81:     STA [%cursorAddress]+Y
_ O  O _ _ O  _ _ _ O ;  ; 0x0290 ; 0x91
_ O  _ _ _ _  _ _ O O ;  ; 0x0291 ; 0x03
; 82:     INC Y ; Test the value of Y
_ O  O O _ _  O _ _ _ ;  ; 0x0292 ; 0xC8
; 83:     DEC Y
_ O  O _ _ _  O _ _ _ ;  ; 0x0293 ; 0x88
; 84:     BNE @monitor_print_again
_ O  O O _ O  _ _ _ _ ;  ; 0x0294 ; 0xD0
_ O  O O O O  _ O O O ;  ; 0x0295 ; 0xF7
; 85:     @monitor_print_done:
; 86:     RTS
_ O  _ O O _  _ _ _ _ ;  ; 0x0296 ; 0x60
; ./software/data.asm
; 1: 
; 2: BASE $C000
; 3: @data_hello:
; 4: DATA $48 ; 'H'
; Change address to 0xC000
O _  _ _ _ _  _ _ _ _ ;  ; 0x00
O O  O O _ _  _ _ _ _ ;  ; 0xC0
_ O  _ O _ _  O _ _ _ ;  ; 0xC000 ; 0x48
; 5: DATA $65 ; 'e'
_ O  _ O O _  _ O _ O ;  ; 0xC001 ; 0x65
; 6: DATA $6C ; 'l'
_ O  _ O O _  O O _ _ ;  ; 0xC002 ; 0x6C
; 7: DATA $6C ; 'l'
_ O  _ O O _  O O _ _ ;  ; 0xC003 ; 0x6C
; 8: DATA $6F ; 'o'
_ O  _ O O _  O O O O ;  ; 0xC004 ; 0x6F
; 9: DATA $20 ; ' '
_ O  _ _ O _  _ _ _ _ ;  ; 0xC005 ; 0x20
; 10: DATA $58 ; 'X'
_ O  _ O _ O  O _ _ _ ;  ; 0xC006 ; 0x58
; 11: DATA $65 ; 'e'
_ O  _ O O _  _ O _ O ;  ; 0xC007 ; 0x65
; 12: DATA $72 ; 'r'
_ O  _ O O O  _ _ O _ ;  ; 0xC008 ; 0x72
; 13: DATA $78 ; 'x'
_ O  _ O O O  O _ _ _ ;  ; 0xC009 ; 0x78
; 14: DATA $65 ; 'e'
_ O  _ O O _  _ O _ O ;  ; 0xC00A ; 0x65
; 15: DATA $73 ; 's'
_ O  _ O O O  _ _ O O ;  ; 0xC00B ; 0x73
; Execute start address
O _  _ _ _ _  _ _ _ _ ;  ; 0x00
O O  _ _ _ _  _ _ O _ ;  ; 0x02
